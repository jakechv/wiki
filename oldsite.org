:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: toml
:EXPORT_FILE_NAME: site
:EXPORT_DESCRIPTION: personal website
# :EXPORT_HUGO_IMAGES: /img/org.png
:END:
#+TITLE: site
#+hugo_base_dir: .

* Projects
:EXPORT_HUGO_SECTION: projects
** Projects
:EXPORT_HUGO_MENU: :menu "main"
:EXPORT_FILE_NAME: _index
Descriptions of projects I've worked on.
** DONE Poo-NU
CLOSED: [2020-01-17 Fri 20:59]
:EXPORT_FILE_NAME: poo-nu
Started at HackHarvard with a team of three other Northeastern students and
myself, Poo-NU is an application to help Northeastern students locate the
closest available restroom. The application can be found at https://github.com/jakechvatal/poo-nu.
The application is built with a React Native front-end with Material UI
components and Bootstrap formatting. It interfaces with a GraphQL backend layer
that makes queries to a MySQL databases. We selected these technologies
primarily because we each wanted to learn how to use one of the technologies we
chose; I had no experience with GraphQL and very little with React Native, so I
learned how to apply my React knowledge to a cross-platform application and to
adjust to a new form of querying and API definiton.
Users are currently able to locate the nearest available bathroom via Google
Maps, view which bathrooms are closest to them geographically and key
information about them, such as their average rating and building location. Upon
tapping on a bathroom, users are presented with a more detailed view of the
bathroom with all of its ratings left by other users, and are able to add to
these ratings themselves. We felt that making PooNU not just a utility, but also
a community of others would help Northeastern students bond over their favorite
campus bathrooms.
** DONE CDK Global Internship
:EXPORT_FILE_NAME: cdk
At CDK Global, I leveraged React.js and Redux to, along with a high school
intern and two college interns, develop software used by an internal credit
reporting team to monitor the number of credit checks made by individual car
dealerships.
*** Tech Stack
We built a full-stack web application with a React.js front-end, making use of
both Material UI and CDK Global's proprietary React components as well as Redux
and thunk for asynchronous global state management. Interesting challenges posed
by this project include designing the inheritance hierarchy through which React
components were displayed, as the desire of the end user to display a
spreadsheet that presented statistical information in different forms in
different modes, and designing an efficient way to manage global state with
Redux to make a minimal number of request while keeping the information
displayed up to date. The former problem was resolved by Redux to connect
disparate components to their corresponding information without making many
additional requests, and the latter through a custom Redux store method to
refresh the data asynchronously as the application is used, refreshed and as
information with different priorities was desired.
The backend was constructed with the Spring Boot Java framework; the entire
application was run on an Nginx server running in a Docker container on CDK's
servers. To this end, I helped format the server and docker container to run the
front-end on CDK's development, testing and production servers, and communicated
with the Spring Boot developers to ensure the data representations presented by
our API were best conducive to the needs of the end user on the front-end (as
structure informs representation).
*** Agile Organization
Our team made use of a weekly Agile/Scrum organizational paradigm, in which we
held sprint planning sessions to craft workloads, daily stand-ups to update and
review progress, as well as reflection sessions to ensure that the system and
each of its participants was running smoothly. We made heavy use of Atlassian's
Jira organizational framework to organize this procedure, and for compatibility
we used Stash as our git repository of choice as well as various other Atlassian
services for the purposes of communication and documentation. As typical with
Agile, development workflow started with a weekly assignment of stories,
then creating a feature branch for each story to be completed and providing
detailed instructions by which other team members could validate the work once
the work was completed (as three other team members were required to approve a
commit before it could be staged and merged into our master branch).
Also of note was the extensive communication with our product manager - the
objective of our project was not very well-defined when the internship began, so
we set up extensive meetings with the non-technical end user, preparing
questions and creating user stories for various desires of the end user based on
responses and feedback on the current status of the application. Eventually, we
found that receiving some answers to basic desires of functionality, then
crafting user stories based on this feedback and presenting the end user with
various iterations of demo applications to determine what the user desired, was
most effective in determining concrete end goals for the project.
** DONE Portland State University HSAP
:EXPORT_FILE_NAME: psu-hsap
During a high-school summer, I was able to participate in an iteration of the
Department of Defense's High School Apprenticeship program through Portland
State University. Along with two other high school students, we explored a
variety of mathematics and programming paradigms pertaining to generating prime
numbers, working with superclusters, and partitioning sparse graphs through the
development of OpenMP-parallelized C++ libraries.
All of our work was created under the PDX-Math-HSAP GitHub organization, which
can be found at [[https://github.com/orgs/PDX-Math-HSAP/]].
*** Primes
We began the internship with a warm-up activity of sorts: writing an efficient
algorithm to identify and display a number of accurate prime numbers in quick
succession; in other words, a prime sieve. We began with a naive implementation
of the Sieve of Erasnosthenes, an ancient Greek method developed to locate
primes in the first 100 numbers, then made certain optimizations such as
prematurely excluding all even numbers and all multiples of three from our prime
search for greater efficiency. We ended up utilizing the Sieve of Atkin to
find primes, utilizing both a modulo 2 and a modulo 6 implementation to
determine whether numbers are primes.
*** Sparse Matrices
However, the primary objective of the program was to implement various graph
algorithms rooted in linear algebraic concepts to partition unweighted sparse
graphs. These are also known as networks with low connectivity, and are
trivially encoded as matrices with few '1' characters to represent a connection
between two nodes, as well as a majority of '0' characters to represent a lack
of a connection. Depicted below is an asymmetric graph featuring apples, bananas
and oranges as nodes, with the existence of an edge denoted by '1' and 0
otherwise.
An arbitrary explanation for such a graph is a supermarket in which an apple can
only be purchased after a carrot, a banana can be purchased after either a
banana or a carrot, and a carrot can be purchased after another carrot. It's
unclear how the initial fruit was obtained. Feel free to view these as arbitrary
'a', 'b' and 'c' nodes of a graph as well.
|        | apple | banana | carrot |
| apple  |     0 |      0 |      0 |
| banana |     0 |      1 |      0 |
| carrot |     1 |      1 |      1 |
To save a significant amount of space when working with large
graphs, these matrices can be represented in compressed-sparse row format
instead - denoting both the row in which the '1' occurs as well as the column
position. Such a matrix looks like the following:
This arrangement is able to save us x amount of space while avoiding any
increase in time complexity - the value of an element given its coordinate in
a non-compressed matrix can be determined with more operations, but is still a
constant-time operation with regards to the number of cells seen.
To be continued and updated in the future.
*** TODO Matrix Algorithms
*** TODO Supercluster Usage
** DONE Three.js Experiments
CLOSED: [2020-01-17 Fri 21:01]
As confusing of a language as it is, JavaScript has one thing going for it --
it's the only language native to the web. It's the easiest way for developers to
communicate to the world and show off their best work! I've invested a lot of
time and effort into learning the ins and outs of Three.js - a JavaScript
library for developing three-dimensional visualizations.
Here's where I share these with the world.
One of my favorite three.js projects can be found at chvatal.com, the splash
page for this site; another sample user interface can be found at jakechvatal.github.io. This kind of work is on haitus for me as I focus on academic projects during the semester but I'm eager to pick it up as an extracurricular interest when I'm on break.
** DONE Building this Website :@updates:web:
CLOSED: [2019-12-30 Mon 11:12]
:EXPORT_FILE_NAME: building-site
This website is written with org-mode, powered by Hugo, and hosted with Netlify.
Why?
I had several needs for making this website.
1. Easily updatable. My last website was my first serious attempt at web
   development without using a framework - making use only of HTML, CSS and Javascript - and hosted on an archaic static site deployment platform. As impressive as the Three.js visualizations on the site were, I had to dive into the code, then drag-and-drop upload the individual files to a host. The difficulty of updating the website kept me from updating it at all, so I wanted a solution with minimal friction.
2. Customizable. Drag-and-drop templates are restrictive, only allowing for the use of pre-made components. I want to be able to add neat animations and custom styles to have the freedom to display my website as I want it. Further, a structured templating system is ideal, as it'll save a lot of the time spent on boilerplate code.
3. Maintained. When I'm using a static site generator such as Hugo, the framework does a lot of the heavy lifting for me; I don't have to worry about the integrity of a large codebase for my personal site and can save that concern for other projects I'm invested in.
I was looking for the easiest way for me to track and update my website. I've been getting a lot of use out or Org Mode in Emacs recently, and its ability to function across platforms (as a plain-text document format) as well as its powerful language-specific syntax highlighting and evaluation (with LaTeX support!) made it an ideal candidate for composing a website.
After finding the ox-hugo package, this became a no-brainer; I can compose my entire site in a single org mode file, then export it to a system of markdown files that I can slot into my Hugo blog.
After adding the markdown file tree to my blog, I can just commit to the repository and push to Github. I've found that Netlify offers the best free tier of any static web host, and the continuous integration with a Github repository - as well as the ability to build the Hugo website on the fly - is powerful!
Currently, I'm using a theme made for Hugo by another user, forked and added as a git submodule to the we site's repository. I'm working on adapting this to my own theme to better fit my use case - though I'm content with the minimal look of the website, I would like to better convey my projects and skills going forward.
** TODO GraduateNU
** TODO Activity Annotator
** DONE School Projects
SCHEDULED: <2020-01-17 Fri>
:EXPORT_FILE_NAME: neu-projects
Here are some interesting school projects I've worked on during school. Code for these projects can be provided upon request.
StackLang Interpreter (CS2500A)
Wrote an interpreter for a small, stack-based programming language with lambdas, thunks and continuations in Racket's Intermediate Student Language DSL. Continued to TA this course and teach other students how to craft their own interpreters following similar principles.
MiniCraft (CS2500A):
Wrote a top-down two-dimensional variation of Minecraft in Racket's ISL DSL wherein players can traverse a world, place and destroy different types of blocks with special effects such as exploding TNT. Interfaced with a course-administered server to interact with other players in real time.
Tower Defense (CS2510A):
Designed and developed a tower defense game in Java. Featured a currency system, dynamically placeable towers with different effects (i.e. freezing surrounding enemies, shooting ahead of the moving objects from a long distance to hit them) along with enemies able to move along the track in real time.
Seam Carving Algorithm (CS2510A):
Implementrd a seam-carving algorithm to compress the least important parts of an image while preserving the most detailed, removing both horizontal and vertical seams to do so. The algorithm is able to record, reverse and replace the seams as needed.
Maze Solving Algorithm (CS2510A):
Wrote different implementations of an efficient maze-solving algorithm in Java, then displayed the different algorithms solving the maze in real time.
Animator (CS3500):
Designed and developed an Animator in Java using the Swing UI library and a
model-view-controller framework designed to allow the view to be hot-swappable
as needed. Practiced many Java design patterns and utilized some neat data
structures.
Efficient Memory Allocator (CS3650):
Wrote implementations of malloc(), calloc() and free() in C that were faster than reference GNU Core Utils implementations on provided edge cases.
Pacman AI (CS4100):
Implemented a variety of artificial intelligence algorithms to assist pacman to consume pellets while avoiding multiple ghosts. Worked with a variety of different algorithms, from particle filtering to deep learning.
** Dotfiles
:EXPORT_FILE_NAME: dotfiles
I've spent a lot of time configuring my Arch Linux System.
My initial installation is catalogued in Arch Linux Configuration; this is a
description of the work I've done to make the installation mine.
*** Color Scheme
I've based my entire color scheme on Doom Emacs' 'Doom-one' theme, borrowing
from the colors used for both the background and the syntax highlighting and
reverse-engineered using both the original configuration file and the
```xcolor``` program as a last resort.
I've spent a considerable amount of time configuring the CSS of my Firefox
browser as well; taking lots of inspiration from /r/firefoxcss users, I've
removed much of the unnecessary syntax and moved the tab bar below the address
bar so that searching and typing in URLs is the focus of the experience in the
browser.
*** Emacs
I'm relatively new to Emacs - I've used the platform for about two months, and
I'm still picking up on the keyboard shortcuts and utilities for a variety of
tools. Most of the code I've written in recent memory has been OCaml or Haskell,
and Emacs arguably provides the best set of tools to develop for both of these
languages, with well-supported major modes and a variety of integrations. I take
all of my course notes in Org mode - its ability to insert inline LaTeX and code
blocks is incredible - and writing this website in Org mode is a snap.
I'm working with the Doom Emacs distribution, and my configuration is centered
around changing my Org-mode tags. My central repository for these files is
Dropbox, and they sync seamlessly between my phone and my computer with my
private Dropbox repository - editing such files on my phone with Orgzly, a
well-supported application, even available on F-Droid for those not a fan of
Google!
*** Keybindings
The choices I've made that have impacted my operating system workflow the most
has been the keyboard shortcuts I've chosen. I've assigned these bindings in
both the i3 configuration file and through X with the xbindkeys program. Perhaps
the most important binding I've made is Mod4 (assigned to my Windows key on my
XPS) + D to Rofi's DMenu-like feature; I can open any program without having to
load up a terminal by interfacing with this program that analyzes all of the
programs in my /usr/bin.
I have my bindings in my configuration file for i3 assigned to various aspects
of my 'system'; that is, utilities that allow me to better navigate or use my
computer such as rofi. The bindings I have in xbindkeys are primarily geared
towards scripts I have running, such as for increasing and decreasing
brightness.
*** Vim + Tmux: Developing without X
Running a graphical server to interact with your computer is too much overhead
for most tasks. If only text editing, file configuration or scripting has to be
done, then why launch an entire session with a desktop environment and/or window
manager just to accomplish these tasks? After all, we already have access to a
terminal environment when we boot; it seems a bit unnecessary to start X
immediately upon login. Utilizing this terminal substantially decreases
operating system startup time - you're already at the terminal!
Though I haven't made extensive use of the setup yet, I've been working on a
basic configuration using just two programs: Vim and Tmux. Vim is a
terminal-based text editor - it's been around forever and has lots of keyboard
shortcuts as well as substantial third-party plugin systems with a variety of
useful utilites. Tmux is a terminal multiplexer - it functions exactly like a
window manager, opening multiple terminals with different preset configurations,
but does so without having to interface with any user sessions, residing solely
in the terminal. Using these two programs, we can craft the perfect environment
for writing programs, text-editing, browsing the file system (ranger is my
preferred interface) and even browsing the internet (with a TUI web browser such
as w3m). As I'm currently writing this in Emacs (which doesn't have the best
terminal user interface), I definitely have not completely accustomed to my
setup -- but such a toolchain is certainly something I can see many people usin
to enhance productivity even on devices with minimal graphical capabilities, and
can be set up on a remote server as well to avoid any need for saving files on a
local system.
* Tutorials
:EXPORT_HUGO_SECTION: tutorials
** Tutorials
How to accomplish things (both technical and non-technical) that I've had
trouble with in the past.
Either the current solution on the internet didn't fit my use case,
I couldn't track down a solution, or I've discovered something cool
I'd like to introduce to others.
** Adding AWS Support to Your Android Application
** TODO Arch Linux Configuration
:EXPORT_FILE_NAME: arch-config
I currently do all of my work on a Dell XPS 9370 (4k, 1 TB SSD) with an Arch Linux
installation, dual-booted alongside Windows 10.
I've documented my installation process here for myself and others
configuring similar systems.
Before starting, please refer to your system's page on the Arch Wiki:
[[https://wiki.archlinux.org/index.php/Dell_XPS_13_(9370)]], as it will provide
information about your specific system and configuration. This guide will be
somewhat system specific, as its main motivation is to tackle the hurdles I
faced with my specific installation, but it should be fairly extensible to other systems.
*** Setup
The setup is more or less similar to that described in the Arch Linux guide.
Snag an installation from a reputable source
https://www.archlinux.org/download/, then verify the signature of the
installation to ensure it's legitimate and unmodified.
Write the Arch Linux .iso file you've obtained to a thumb drive using another device
you have on hand. I've used the Rufus utility on Windows 10 in the past, but any
similar flash drive formatting utility will do.
*** Installation
**** Making Space
**** WiFi
***** Tackling EduRoam
*** System Setup
Congratulations - your system's successfully booted!
Now, you're going to install some useful utilities and establish a framework
upon which you can build your system the way you'd like.
**** Campus Wifi Connection
*** Extras
We can benefit from some additional performance optimizations for our system.
**** Power Conservation
To conserve power, we can enable some kernel parameters as follows:
#+begin_src sh
$ touch /etc/modprobe.d/i915.conf
$ echo "options i915 modeset=1 enable_rc6=1 enable_fbc=1 enable_guc_loading=1 enable_guc_submission=1 enable_psr=1" >> /etc/modprobe.d/i915.conf
#+end_src
We can also undervolt our system using a utility such as TLP.
Undervolting thresholds are different for every system, and depriving power from
parts of your system can result in permanent hardware damage. This is not good
and should probably be avoided. With that said, undervolting my system seemed to
net me about 30 minutes of battery life (I was able to undervolt by about
-100mA, but this may not be the same for your CPU). For more on undervolting,
check out this guide. Though it's for Windows systems, the same guidelines apply
regardless of system, even though the parameters may be different.
[[https://www.ultrabookreview.com/10167-laptop-undervolting-overcloking/]]
I'll likely compose an undervolting tutorial in the future.
**** Enhancing Speed
The CPU is substantially throttled by Dell and Intel to prevent the system
from getting too hot and kicking in the fans. This is desired to make the system
sound quieter, but it significantly reduces the actual power of our machine.
The throttled^{aur} package:
[[https://www.archlinux.org/packages/community/any/throttled/]] fixes this Intel
throttling constraint handily on my machine. Register this with systemctl and
you're good to go.
We can also tweak our thermal mode profiles to tweak the default behavior of our
system. This can be done with terminal commands:
See all of the thermal modes available:
$ symbios-thermal-ctl -i
See the current thermal mode set:
$ symbios-thermal-ctl -g
Set the desired thermal mode:
$ smbios-thermal-ctl --set-thermal-mode=THERMAL_MODE
**** Sleep Mode Efficiency
The default sleep mode for Linux systems on the XPS isn't the best for power
saving.
*** Personal Preferences
https://wiki.archlinux.org/index.php/Bluetooth_keyboard -- login w bluetooth keyboard
https://wiki.archlinux.org/index.php/Bluetooth -- set up bluetooth headset
// some installations require a new key - ensure you trust signature, then add
the public key that could not be found to your roster of keys
** NEXT Improving the Windows 10 Experience
SCHEDULED: <2020-01-01 Wed>
Before I switched to using Arch Linux, I was working on Windows 10. I made a
variety of changes to my system to make it more efficient and more private. These are those.
*** NEXT Stopping Telemetry
Windows tracks everything you do, and by default it has the permissions to do so on your system. The system also consumes resources to do so, utilizing a small amount of (perhaps vital) processing power to record every keystroke and movement. As Windows is closed-source, we unfortunately can't determine exactly what it's doing behind the scenes, but we can do our best to prevent tracking and marginally improve performance.
A program I've made use of is ShutUp10. This is little more than a nice user interface for the Windows registry, but provides an easy interface through which one can easily make privacy decisions. I'd go along with most of the program's recommendations for settings unless you feel that you're going to need to contact Microsoft support and want them to retrace your keystrokes to determine what you've done wrong.
*** NEXT Removing Cortana
Users of Windows often don't make use of Cortana, the digital assistant built into the Windows 10 platform. It can consume up to 200 megabytes of RAM, a non-trivial amount of CPU power and is always running in the background - potentially picking up conversations you have while your computer's on. Further, Cortana makes your taskbar much wider - you don't need a, search box in your dock when you can condense it to a search icon!
Unfortunately, Windows 10 has chosen to couple Cortana with the Windows file system program - making Cortana more difficult to remove.
You're going to have to dive into the registry for this one.
*** NEXT Improving Speed
Aside from the other points, there are a couple of programs you can run to enhance the speed and power performance of your device; by a significant amount f you're lucky.
My favorite utility to optimize my system's performance is Throttlestop. This utility interfaces with the same API as Intel's Extreme Tuning Utility, allowing users to undervolt or overclock their device as well as provide a variety of useful power settings.
My system is set to undervolt by about 80 mV, which I've (experimentally, loosely) determined to get me about half an hour of battery life - not a bad deal for a program! Further, when unplugged, I fix the clock speed at about 900 mhz; as I often don't do any heavy programming work on windows, primarily sticking to web browsing and making use of Microsoft Office products, this works just fine for me. This also prevents my fan from kicking in while I'm in class so that I can be less of a distraction if taking notes during lecture.
When I'm plugged in, however, I fix my clock high. With no concern for battery, my charging setting fixes (or claims to fix) my CPU at 3.8 gigahertz, getting me optimal performance when plugged in. This has allowed me to play games like Overwatch on medium settings at over 60 FPS without the use of a discrete GPU, and significantly improves performance of heavier loads like Adobe Photoshop, Lightroom or Premiere Pro when I make use of them.
A consideration I have in the future for improving efficiency is to replace the thermal paste on the CPU - often, the paste used is applied haphazardly and not of good quality. Replacing this with a substantial costing of liquid metal thermal paste could significantly improve the heat profile, thus improving battery life and performance.
*** NEXT Removing from Startup
SCHEDULED: <2020-02-03 Mon>
A lot of programs, when installed, add themselves to your list of programs to execute on startup. This leads to slow boot times and an unfriendly experience turning on your computer.
To resolve this:
Right click the start button (Win10 icon) -> select Task Manager
Click the 'more details' expander.
On this page, view the 'startup' tab. To remove a program, click on the program name, then 'disable' in the bottom right corner of the Task Manager window.
Some common programs that have this behavior:
- Adobe suite - runs updater tools
- Slack, Chrome, Spotify, and other Electron applications - open on startup, each consuming a significant amount of time and memory
- Bloatware installed by your device manufacturer (examples from Dell include Waves MaxxAudio and Killer Control Center)
*** NEXT SSH, FTP, Linux
There are a variety of tools you can make use of through windows to interface with traditionally Unix protocols.
FileZilla is an FTP client that allows for drag-and-drop file transfer between your local system and some system you've logged into through the file transfer protocol.
PuTTY is my SSH client of choice, and may require additional tooling and configuration but works smoothly.
WSL, or Windows Subsystem for Linux, can be installed from the Windows store. It's not a drop-in replacement for a virtual machine or Linux distribution, and is not completely identical to the distribution it claims to replicate - but it can accomplish many things similar to that of a Debian system (or whichever WSL distribution you choose).
To forward with X over SSH through either PuTTY or WSL, you'll need to install an X11 server for Windows. My recommended choice is Xming; forwarding programs to Xming can be a tough trick, but it's worth it if you'd like to, for example, stream data from a Kinect through a Pi to a local Windows system.
For what it's worth, it's much simpler to make use of networking technologies from the command line--and a Linux system, in my opinion, provides the smoothest user interface for doing so - running programs through the terminal.
* TODO Thoughts
:EXPORT_HUGO_SECTION: thoughts
** Thoughts
My thoughts on non-technical subject matters.
** Favorites
I've spent a lot of time finding the best products for me for common tasks. The
items in this list are current favorites of mine and have become a part
of my daily life.
Products only make it in here if I've used them for a considerable length of
time and have determined that they are the best tool to fit my requirements. I
don't list products that happen to just serve a use case of mine; I'll only list
them if I strongly feel that they're the best tool I've found to satisfy my
needs for my criteria.
*** Pants
Though I haven't had the opportunity to try many of their alternatives given the
prohibitive cost of the clothing, my favorite pants fit many of my needs -- they
need to look subtle and versatile (this means black, minimally textured and
slim) while retaining flexibility, water resistance and lightweight properties.
You'd think it would be impossible to find a pair to satisfy all of these
criterion, but the Enfin Leve Amaitu pants in Scholler Dryskin have gotten there
for me. They look like chinos but are as flexible as sweatpants, have incredible
water-wicking ability, and are skinny and subtle - easy to move around in but
formal enough to wear to a more casual interview if need be (I have).
Alternatives I haven't been able to consider in this section include the Acronym
P-10S, Outlier End Of The World pants, Arcteryx Veilance' selection; these are
options that haven't been readily available for me to try.
*** Hoodie
The hoodie is probably the most opinionated of these products -- it's chosen to
fit my body type and my preferences, which most likely aren't the preferences of
others, and isn't pedestrian enough to wear without being seen as a bit odd or
'fashion-forward' given its structure.
This is the Cav Empt White Line heavy hoodie. Really, the White Line hoodie was the
hoodie I chose to pull the trigger on, but any Cav Empt hoodie would fit my
preferences well, given their peculiar construction. The broad build and hanging
shoulder stitches readily accomodate my wider frame, while the protruding
neckline and large hood compliment layering well. While other hoodies are seen
as primarily layering pieces, this one has the flair to be a statement piece in
and of itself. Some of their hoodies have more elaborate designs than others --
this one is, as the name suggests, a white line across an otherwise black
hoodie, but the 'Hands' hoodie, depicting, well, hands all over, is another
personal favorite of mine.
I do wish that the hoodie were water-resistant or more easily accessible, but as
such a niche product it's difficult to have it all. The Carhartt Rain Defender
hoodie is a consideration for both of these criteria, but it doesn't have the
'cool factor' of an obscure Japanese designer brand, and likely isn't designed
to fit like one on the body.
*** Pencils
The Pentel Orenz Nero is my daily driver. Its metal-infused body is
both sturdy and compact, and the lead tip easily retracts to prevent damage to
the pencil. Its wild feature is the lead guard, enabling the use of 0.3 and 0.2
mm lead by shielding it with an extending metal tip, as well as the ability to
auto-dispense lead whenever the tip is pressed to paper -- clicking the back of
the pencil is no longer necessary!
The Uni Kuru Toga is my second favorite pencil and has a clever gimmick --
every time the user presses the pencil to paper to write, the metal tip triggers
a mechanism that slightly rotates the lead, ensuring that the lead never gets
dull on one side. This doesn't sound like much, but it's substantially more
comfortable to write with than pencils with flattened lead.
*** Audio
The AudioEngine A2+ monitor speakers have checked all my boxes. They're
incredibly small for their power and audio quality, allowing them to easily fit
on small desks or in cramped spaces without occupying much room. They have a
variety of convenient ports on the back and can be connected to via Bluetooth,
so the speakers can be controlled from around the house! Their construction is
simply beautiful as well -- there is no tradeoff between aesthetics and audio
quality with these.
Bose QC35II: Though there are newer headphones with better noise-cancelling
technology, cooler gimmicks and perhaps better looks, these headphones *just
work*. Their noise cancelling capabilities are very capable, and they have a
variety of hardware buttons -- they won't register accidental swipes or random
touches from the environment that will control the music.
The B&O Play by Bang and Olufsen headphones are a great option as well, but
they're a bit more expensive, their noise cancelling isn't as optimal, and they
look a bit flashy for my taste -- I like the unopinionated and functional
construction of the Bose.
*** Laptop
The Thinkpad X1 Carbon is very well-constructed and executed. Though it does
have the Intel Management Engine and is manufactured by Lenovo (both potential
security vulnerabilities), it's incredibly compatible with Linux and the
keyboard is unparalleled. The trackpoint isn't just something to laugh at
either - it allows for mouse use without moving off of the home row.
*** Daypack
My current daily driver is the DSPTCH Daypack, as it offers a quick sling
feature that allows me to pull the bag off of my back in one fluid motion as
well as to tighten the bag to my chest when I'm concerned about it flapping
around and disrupting other activities; with a top-loading zipper and a front
pocket with organization for pens and pencils, it's easy for me to access
anything I might need at my convenience. Admittedly, it's not the perfect bag for
my needs (it's not waterproof, the zippers are a bit tight, and I wish it
offered more in the way of organizational pockets), but it's the best product
I've found to fit my needs so far. It's the perfect size though: 12L is just
enough for my laptop, two notebooks, a small camera, a beanie and headphones to
fit in the main body of the bag.
Other considerations are the Acronym 3A-1 or Bagjack slings, but these bags are
rare and can be prohibitively expensive when found.
*** Camera
The best camera is the camera you have with you.
That said, my favorite camera is incredibly portable while still retaining
features I prioritize -- swappable lenses, high-quality glass, and a variety of
mechanical features to separate the process of making an image from the process
of meddling with menus. I'd like to be able to pull the thing out of my bag on
the spot, take a quick picture or two, then stow it away just as quickly.
Though I haven't purchased my ideal camera yet, Fuji's X-T line is incredible in
this regard - the cameras and lenses are lightweight and compact while still
delivering good ISO performance and incredible image quality. The X-Pro line is
also worth considering, though I'm not as much a fan of the rangefinder-like
viewfinder those cameras possess.
*** Toys
The Lego Architecture Studio set is a true foray of Lego into adulthood. Other
Lego toys marketed towards older audiences tend to be display pieces, intricate
Lego sculptures that are built once and left on display to dust up on a shelf.
As many of us know from childhood, though, the beauty of Legos doesn't lie in a
single creation; rather, it's the blocks' inherent ability to compose
practically anything the mind can dream up. An adult Lego set, too, should
embody this experience. Without an opinionated set of instructions or clear
guidance, the set provides one the tools to assemble all sorts of neat buildings
on a small scale.
The Architecture Studio is a set of 1210 white Lego bricks with a variety of
interesting shapes and leaves the creativity entirely to the user. There is no
hunting for bricks you need in boxes upon boxes, nor matching of colors or
conflicting patterns -- with everything in the set designed to interact, it's
the perfect playground to experiment and construct your own ideas without
limitation. The product looks sophisticated, too; even spilled out on a table,
the white Legos and half-assembled creations look practically artistic. It's not
hard to add onto this set with new bricks and ideas either, as sites like
Bricklink provide a direct connection to any brick you can think of to add to
your architecture kit.
The 'Tech Deck' is easy to begin using but incredibly hard to master. It's super
portable as well, so it's easy to fiddle with at your leisure; I'll carry one
around in my daily bag from time to time as something to keep my hands occupied
as I solve a difficult problem or coding challenge.
*** Programs
I live most of my life on my computer, and there are some programs I can't
function without.
- Doom Emacs
- Firefox (+ Vimium, theming)
*** Keyboard
We spend most of our lives using computers, so it's only natural to invest in a
good keyboard. Though mechanical keyboards seem like an expensive fad, I've
found mine to be incredibly comfortable and have a great experience using them.
My introductory keyboard was the ObinsLab Anne Pro 2. It's relatively cheap,
compact, and comes with a GUI configuration program while offering Bluetooth and
USB-C connection capabilities. It's a very comfortable, budget-minded
conventional keyboard that's on the smaller side. My primary wishes for this
keyboard would be compatibility with QMK firmware and hot-swappable switches to
allow newer enthusiasts to find the switch of their preference, but it's hard to
have it all.
My new keyboard is a Planck Rev. 6.1, a 40% ortholinear keyboard.
I'm currently looking into ergonomic split keyboards which allow the hands to be
separated when typing; this is said to prevent carpal tunnel syndrome by
allowing the hands to rest in a more natural positon, though it's unclear how
effective this is relative to the traditional or ortholinear keyboard (it
certainly feels more comfortable once getting used to it).
*** Cookware
Though I'm still relatively new to cooking, these are some of my favorite
products to use to prepare food.
Victorinox Fibrox Pro - this knife can be found for about $35, and for a
beginner's knife it's been fantastic. I was using a small paring knife to
prepare all of my food before this, and it's made an incredible difference in
the speed and accuracy with which I can prepare food! Though it's possible I'll
upgrade in the future (I didn't want to invest in an incredibly expensive knife
just to ruin it as I learn to navigate the kitchen), this knife is one I could
very possibly use for years.
** On Style :@reviews:fear:
:EXPORT_FILE_NAME: style
Style is important to every aspect of life.
** Cooking
** On Privacy
Why is privacy important?
** Time Management
How do I do it?
** My Music
** NEXT Analysis Paralysis: Making Decisions Now
The more time you spend reading, the less you'll know and the less you'll get done.
* TODO About
:EXPORT_HUGO_SECTION: about
** About
Welcome to my website! If you're looking for my resume, that can be found here.
I'm Jacob Chvatal, a sophomore Computer Science student. I spent the first eighteen
years of my life growing up in Portland, OR (yes, many aspects of the city are
similar to those showcased in Portlandia), and am currently attending
Northeastern University in Boston, Massachusetts.
In the classroom, I'm passionate about open-source software, well-designed code,
and (*)nix systems. My current interests lie in developing new methods for
humans to interact with technology, whether empowered by Domain-Specific
Languages or Computer Vision - I want to help people learn to interact with the
technology we use daily and empower them with tools to accomplish this more
efficiently and more effectively.
As such, my studies have primarily focused on exploring machine learning and
programming languages, with some time spent on high-performance computing and
algorithm optimization.
When I'm not coding, I spend much of my free time attending underground
concerts, taking photos and playing obscure board games.
* Site Meta (ideas, notes, etc)
#+TITLE: site-meta
Planning out what I want my personal website to look like.
** Use cases:
What do I want this personal website to do?
(these should be interpreted in order)
- present information about me in an easy to read fashion
- showcase my projects and work as a developer
- demonstrate my skills with web development and framewokrs
- showcase some of my cool 3d animation work
  Notable: it is cool to have splash pages;
  however, easily editing and updating the site is the primary goal.
** Usability (for me)
- edit just a document to update the site
  I may have to run some command as well to push the update, but ideally
  I will jsut be able to edit a document, push the change and it will be made.
- easily make new posts and changes.
  again, this should be as easy as editing a single document.
- showcase cool javascript work
  this is a bit more complicated, as it requires working with low-level aspects
  of the site
  this is also a bit of a stretch goal: it might not be strictly required
  this also might require linkin to an external site or directly modifying the
  template
** References
[[https://orgmode.org/manual/Adding-export-back_002dends.html]]
https://github.com/gcushen/hugo-academic
https://themes.gohugo.io/hugo-lithium-theme/ - best suited for blog
https://themes.gohugo.io/hugo-creative-portfolio-theme/
https://themes.gohugo.io/hugo-theme-novela/ - more business oriented?
https://themes.gohugo.io/liva-hugo/ -- this is more commercial than anything
else
https://themes.gohugo.io/onedly-theme/ theme for documenting one day only diy
projects ?
https://themes.gohugo.io/hugo-terrassa-theme/
https://themes.gohugo.io/hyde/ - maybe? look mroe into this.
https://themes.gohugo.io/hugo-theme-m10c/ -- i like this dark mode
https://themes.gohugo.io/hugo-coder/ -nice format, maybe not enough on landing page
https://themes.gohugo.io/hugo-devresume-theme/ -- nice format, may be too much
on landing page
https://themes.gohugo.io/minimal/ -- like the toolbar and minimalism here, not
usre what else really
** Other Static Site Generators
- https://www.gatsbyjs.org/
  pros: allows for better customizability, definition of my own react
  components : how can this be used with markdown?
  potentially: create my own custom org mode -> gatsby theme thing ?
- https://jaspervdj.be/hakyll/index.html -- used by aaron weiss, uses haskell, not
sure what else
https://using-remark.gatsbyjs.org/hello-world-kitchen-sink/#markdown-in-gatsby
cool project? -> convert my thing to a gatsby markdown file
